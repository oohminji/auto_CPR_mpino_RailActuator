/*

      2024년 6월 3일자 수정본

ver1.1 버튼 인터럽트, 통신 X

-----------------할일---------------------
      모터 구동						          O
      버튼 동작						          O
      압력 센서 받기					      X
      심박 센서 받기					      X
      색인지 센서 빋기				       	  X
      색인지 위치까지 모터 구동		    	  X
      압력 센서 인식 시 모터 정지		  	  X
      정지 버튼 초기 위치로			     	  X (센서 값 들어올 때까지 이동)


      * 빠진 거 있으면 추가 바람 *


                    ※주의사항※
      모터가 끝에 닿으면 굉음나고 고장날까봐 무서우니 조심하세요


수정 할 사항
- 센서 값 잘 읽게 설정하기(현재 대략 3초 간격으로 토글됨, 배선 문제일 수도)
- 레일 따로 움직이게 하기

문제 사항
- 버튼 인식 잘 안됨
- 속도가 너무 느림

*/

#include <Wire.h>

#define Z_PUL 7
#define Z_DIR 8
#define X_PUL 5
#define X_DIR 6

#define Z_Limit1 22	// 모터쪽
#define Z_Limit2 23
#define X_Limit1 24	// 모터쪽
#define X_Limit2 25

#define STOPbtn 26
#define SLEEPbtn 27
#define STARTbtn 28

#define microStep 8 //스텝 and 펄스
#define rotation 12000 //회전수
#define baudrate 115200
#define speed 3

unsigned long long i;
volatile bool stop = true;
volatile bool start = false;
volatile bool sleep = false;
volatile bool FSR = false;

void setup() {
	Wire.begin();
	Serial.begin( baudrate );
	pinMode( Z_PUL, OUTPUT );
	pinMode( Z_DIR, OUTPUT );
	pinMode( X_PUL, OUTPUT );
	pinMode( X_DIR, OUTPUT );
	pinMode( Z_Limit1, INPUT_PULLUP );
	pinMode( Z_Limit2, INPUT_PULLUP );
	pinMode( X_Limit1, INPUT_PULLUP );
	pinMode( X_Limit2, INPUT_PULLUP );
	pinMode( STOPbtn, INPUT_PULLUP );
	pinMode( SLEEPbtn, INPUT_PULLUP );
	delay( 0 );
}

void loop()
{
	if ( digitalRead( STARTbtn ) )
	{
		start = true;
		stop = false;
	}
	
	while ( start == true && stop == false )
	{
		//모터 반대 방향 // Z : HIGH - 모터방향 X : HIGH - 모터 반대방향
		digitalWrite( Z_DIR, LOW );
		digitalWrite( X_DIR, HIGH );
		for ( i = 0; i < ( microStep * rotation ); i++ ) // microStep * rotation 값이 커질수록 많이 이동하는데 이상하게 일정 값이 넘으면 for문에서 못 벗어남
		{
			//if ( digitalRead( Z_Limit2 ) == HIGH ) digitalWrite( Z_DIR, HIGH );
			//else if ( digitalRead( X_Limit2 ) == HIGH ) digitalWrite( X_DIR, LOW );
			//if ( digitalRead( Z_Limit1 ) == LOW ) digitalWrite( Z_DIR, HIGH );
			//else if ( digitalRead( X_Limit1 ) == HIGH ) digitalWrite( X_DIR, LOW );
			digitalWrite( Z_PUL, HIGH );
			delayMicroseconds( speed ); //속도
			digitalWrite( Z_PUL, LOW );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, LOW );
			delayMicroseconds( speed );
			if ( digitalRead( STOPbtn ) ) stop = true;
			else if ( digitalRead( SLEEPbtn ) ) sleep = !sleep;
			while ( sleep == true )
			{
				if ( digitalRead( SLEEPbtn ) ) sleep = !sleep;
			}
			if ( stop ) break;
			
		}
    	   
		delay( 500 );
		
		if ( stop ) break;
		//모터 방향
		digitalWrite( Z_DIR, HIGH );
		digitalWrite( X_DIR, LOW );
		for ( i = 0; i < ( microStep * rotation ); i++ )
		{
			//if ( digitalRead( Z_Limit1 ) == LOW ) break;
			//else if ( digitalRead( X_Limit1 ) == LOW ) break;
			digitalWrite( Z_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( Z_PUL, LOW );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, HIGH );
			delayMicroseconds( speed );
			digitalWrite( X_PUL, LOW );
			delayMicroseconds( speed );
			if ( digitalRead( STOPbtn ) ) stop = true;
			else if ( digitalRead( SLEEPbtn ) ) sleep = !sleep;
			while ( sleep == true )
			{
				if ( digitalRead( SLEEPbtn ) ) sleep = !sleep;
			}
      		if ( stop ) break;
		}
		delay( 500 );
		
		if ( stop ) break;
	}
}